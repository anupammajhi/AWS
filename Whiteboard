2#!/bin/bash

# Get a list of all resource types
resource_types=$(aws resourcegroupstaggingapi get-resources --output json | jq -r '.ResourceTagMappingList[].ResourceType' | sort | uniq)

# Loop through each resource type and list resources
for resource_type in $resource_types
do
    echo "Resources of type: $resource_type"
    aws resourcegroupstaggingapi get-resources --resource-type-filters $resource_type --output table
    echo "-----------------------------"
done







resources=$(aws resourcegroupstaggingapi get-resources --output json | jq -r '.ResourceTagMappingList[].ResourceARN')

next_token=$(aws resourcegroupstaggingapi get-resources --output json | jq -r '.PaginationToken')

while [ ! -z "$next_token" ]; do
    resources="$resources $(aws resourcegroupstaggingapi get-resources --output json --starting-token "$next_token" | jq -r '.ResourceTagMappingList[].ResourceARN')"
    next_token=$(aws resourcegroupstaggingapi get-resources --output json --starting-token "$next_token" | jq -r '.PaginationToken')
done

sorted_resources=$(echo "$resources" | sort | uniq)

echo "$sorted_resources"








require 'aws-sdk-dynamodb'

# Initialize the DynamoDB client
ddb = Aws::DynamoDB::Client.new(region: 'your-region')

# Define the table name and the key of the item you want to update
table_name = 'your-table-name'
key = { 'primaryKeyName' => 'primaryKeyValue' }

# Check if the SuspendedDate attribute already exists in the item
existing_item = ddb.get_item({
  table_name: table_name,
  key: key
}).item

# If SuspendedDate attribute doesn't exist, update it
if existing_item.nil? || existing_item['SuspendedDate'].nil?
  # Define the expression attribute values for the new key-value pair
  expression_attribute_values = {
    ':suspendedDate' => '12/13/2023'
  }

  # Define the update expression to add the new key-value pair
  update_expression = 'SET SuspendedDate = :suspendedDate'

  # Update the item in the DynamoDB table
  ddb.update_item({
    table_name: table_name,
    key: key,
    update_expression: update_expression,
    expression_attribute_values: expression_attribute_values
  })
end



aws cloudformation list-stacks --query 'StackSummaries[].StackName' --output text | xargs -I {} aws cloudformation describe-stack-resources --stack-name {} --query 'StackResources[?ResourceType==`AWS::IAM::Role`].[PhysicalResourceId]' --output text

aws cloudformation list-stacks --query 'StackSummaries[].StackName' --output text | while read -r stack; do aws cloudformation describe-stack-resources --stack-name "$stack" --query 'StackResources[?ResourceType==`AWS::IAM::Role`].[PhysicalResourceId]' --output text; done







{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ec2:CreateTags",
                "ec2:DeleteTags",
                "s3:PutObjectTagging",
                "s3:GetObjectTagging",
                "rds:AddTagsToResource",
                "rds:RemoveTagsFromResource",
                "lambda:TagResource",
                "lambda:UntagResource",
                "sqs:TagQueue",
                "sqs:UntagQueue",
                "sagemaker:AddTags",
                "sagemaker:DeleteTags",
                "redshift:CreateTags",
                "redshift:DeleteTags",
                "dynamodb:TagResource",
                "dynamodb:UntagResource",
                "ecs:TagResource",
                "ecs:UntagResource",
                "ebs:CreateTags",
                "ebs:DeleteTags",
                "eks:TagResource",
                "eks:UntagResource",
                "elasticache:AddTagsToResource",
                "elasticache:RemoveTagsFromResource",
                "glacier:AddTagsToVault",
                "glacier:RemoveTagsFromVault",
                "elastictranscoder:CreateJob",
                "elastictranscoder:UpdatePipeline",
                "apigateway:PUT",
                "apigateway:POST",
                "cloudfront:TagResource",
                "cloudfront:UntagResource",
                "logs:TagLogGroup",
                "logs:UntagLogGroup",
                "sns:TagResource",
                "sns:UntagResource",
                "ecr:TagResource",
                "ecr:UntagResource",
                "glue:CreateTags",
                "glue:DeleteTags",
                "workspaces:CreateTags",
                "workspaces:DeleteTags",
                "emr:AddTags",
                "emr:RemoveTags",
                "kinesis:TagStream",
                "kinesis:UntagStream",
                "neptune-db:AddTagsToResource",
                "neptune-db:RemoveTagsFromResource",
                "route53:ChangeResourceRecordSets",
                "ssm:AddTagsToResource",
                "ssm:RemoveTagsFromResource",
                "events:PutRule",
                "events:PutTargets",
                "athena:TagResource",
                "athena:UntagResource",
                "cloudformation:TagResource",
                "cloudformation:UntagResource",
                "cloudwatch:TagResource",
                "cloudwatch:UntagResource",
                "elasticbeanstalk:AddTags",
                "elasticbeanstalk:RemoveTags",
                "elasticfilesystem:CreateTags",
                "elasticfilesystem:DeleteTags",
                "elastic-inference:AddTags",
                "elastic-inference:RemoveTags",
                "es:AddTags",
                "es:RemoveTags"
            ],
            "Resource": "*"
        }
    ]
}